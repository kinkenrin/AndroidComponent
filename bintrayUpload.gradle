apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

group = publishedGroupId
version = proVersion
//忽略javadoc检查
tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
}

//初始化maven库
install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters一
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId proArtifactId

                // Add your description here
                name projectName
                description projectDesc
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    // 打包doc,避免注解报错
    android.libraryVariants.all { variant ->
//    println variant.javaCompile.classpath.files
        if (variant.name == 'release') { //我们只需 release 的 javadoc
            task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
                // title = ''
                // description = ''
                source = variant.javaCompile.source
                options {
                    encoding "utf-8"
                    links "http://docs.oracle.com/javase/7/docs/api/"
                    linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
                }
                exclude '**/BuildConfig.java'
                exclude '**/R.java'
                doFirst {
                    classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
                }
            }
            task("javadoc${variant.name.capitalize()}Jar", type: Jar, dependsOn: "generate${variant.name.capitalize()}Javadoc") {
                classifier = 'javadoc'
                from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
            }
            artifacts {
                archives tasks.getByName("javadoc${variant.name.capitalize()}Jar")
            }
        }
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

// This generates javadoc.jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

//javadoc configuration
javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version proVersion
        links "http://docs.oracle.com/javase/7/docs/api"
        title "$projectName$proVersion"
    }
}


// 启动上传
bintray {
    Properties properties = new Properties()
    properties.load(project.rootProject.file(bintrayUserPath).newDataInputStream())
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']

    pkg {
//        userOrg = yourOtganizationId
        repo = bintrayRepo
        name = projectName
        licenses = ['Apache-2.0']
        vcsUrl = gitUrl
        websiteUrl = siteUrl
        issueTrackerUrl = issueTrackerUrl
        publicDownloadNumbers = true
        publish = true
        // version {
        //    name = proVersion
        //    desc = projectDesc
        //    vcsTag = proVersion

        //    gpg {
        //        sign = true
        //    }
        //}
    }
}