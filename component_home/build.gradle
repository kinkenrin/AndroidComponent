if (isRunAlone.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion rootProject.ext.versions.compileSdkVersion

    resourcePrefix "home_"

    sourceSets {
        main {
            if (isRunAlone.toBoolean()) {
                manifest.srcFile 'src/main/runalone/AndroidManifest.xml'
                java.srcDirs = ['src/main/java', 'src/main/runalone/java']
                res.srcDirs = ['src/main/res', 'src/main/runalone/res']
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }

    defaultConfig {
        if (isRunAlone.toBoolean()) {
            applicationId rootProject.ext.versions.applicationId + "." + resourcePrefix
        }
        minSdkVersion rootProject.ext.versions.minSdkVersion
        targetSdkVersion rootProject.ext.versions.targetSdkVersion
        versionCode rootProject.ext.versions.versionCode
        versionName rootProject.ext.versions.versionName

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

//configurations.all {
//    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
//        def requested = details.requested
//        if (requested.group == "com.android.support") {
//            if (!requested.name.startsWith("multidex")) {
//                details.useVersion "26.+"
//            }
//        }
//    }
//}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation rootProject.ext.dependencies.appcompatv7
    implementation rootProject.ext.dependencies.constraint_layout
    implementation rootProject.ext.dependencies.arouter_api
    annotationProcessor rootProject.ext.dependencies.arouter_compiler
    implementation project(':commonlib')
}
